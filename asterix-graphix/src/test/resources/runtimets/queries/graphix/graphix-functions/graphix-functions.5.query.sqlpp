/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Test each path function (edges, hop-count, labels, vertices).
FROM GRAPH  VERTEX (:User)
                   PRIMARY KEY (user_id)
                   AS ( FROM      Yelp.Users U
                        SELECT    VALUE U
                        ORDER BY  U.user_id
                        LIMIT     2 ),
            VERTEX (:Review)
                   PRIMARY KEY (review_id)
                   AS ( FROM      Yelp.Reviews R
                        SELECT    VALUE R
                        ORDER BY  R.review_id
                        LIMIT     2 ),
            EDGE   (:User)-[:FRIENDS_WITH]->(:User)
                   SOURCE KEY (user_id)
                   DESTINATION KEY (friend)
                   AS ( FROM    Yelp.Friends F
                        SELECT  F.user_id AS user_id,
                                F.friend AS friend ),
            EDGE   (:User)<-[:MADE_BY]-(:Review)
                   SOURCE KEY (review_id)
                   DESTINATION KEY (user_id)
                   AS ( FROM    Yelp.Reviews R
                        SELECT  R.review_id,
                                R.user_id )
MATCH       (n1)-[e:{1,1}]-(n2)-(n3) AS p
SELECT      EDGES(p) AS pEdges,
            EDGES(e) AS eEdges,
            HOP_COUNT(p) AS pHopCount,
            LABELS(p) AS pLabels,
            LABELS(e) AS eLabels,
            VERTICES(p) AS pVertices,
            VERTICES(e) AS eVertices
ORDER BY    n1, e, n2, n3;