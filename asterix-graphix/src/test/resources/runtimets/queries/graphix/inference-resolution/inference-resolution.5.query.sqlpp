/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

-- param max-warnings:string=1

// We should be able to resolve all elements (e, n, f, last direction), using the edge direction of the first pattern.
SET         `graphix.resolver` "inference-based";
FROM GRAPH  VERTEX (:User)
                   PRIMARY KEY (user_id)
                   AS ( FROM    Yelp.Users U
                        SELECT  U.user_id ),
            VERTEX (:Review)
                   PRIMARY KEY (review_id)
                   AS ( FROM    Yelp.Reviews R
                        SELECT  R.review_id ),
            EDGE   (:User)-[:FRIENDS_WITH]->(:User)
                   SOURCE KEY (user_id)
                   DESTINATION KEY (friend)
                   AS ( FROM    Yelp.Friends F
                        SELECT  F.user_id, F.friend ),
            EDGE   (:Review)-[:MADE_BY]->(:User)
                   SOURCE KEY (review_id)
                   DESTINATION KEY (user_id)
                   AS ( FROM    Yelp.Reviews R
                        SELECT  R.review_id, R.user_id )
MATCH       (u:User)-[e]->(n),
            (n)-[f]-(r:Review)
SELECT      DISTINCT LABEL(e) AS e_label,
                     LABEL(n) AS n_label,
                     LABEL(f) AS f_label,
                     DIRECTION(f) AS f_direction;
