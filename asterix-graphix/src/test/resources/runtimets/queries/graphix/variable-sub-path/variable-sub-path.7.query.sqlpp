/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Subquery + GROUP BY expressing (bounded) shortest-path.
// Subquery + GROUP BY expressing (bounded) shortest-path, using aliases.
FROM GRAPH  VERTEX (:User)
                   PRIMARY KEY (user_id)
                   AS Yelp.Users,
            EDGE   (:User)-[:FRIENDS_WITH]->(:User)
                   SOURCE KEY (user_id)
                   DESTINATION KEY (friend)
                   AS ( FROM    Yelp.Friends F
                        SELECT  VALUE F )
MATCH       (u1)-[{1,3}]->(u2) AS p
LET         pathHopCount = PATH_HOP_COUNT(p),
            pathVertices = PATH_VERTICES(p),
            myUser1 = u1,
            myUser2 = u2
GROUP BY    myUser1, myUser2
GROUP AS    g
SELECT      myUser1.user_id AS u1_user_id,
            myUser2.user_id AS u2_user_id,
            ( FROM      g AS gi
              SELECT    VALUE ( FROM    gi.pathVertices AS pv
                                SELECT  VALUE pv.user_id )
              ORDER BY  gi.pathHopCount ASC
              LIMIT     1 )[0] AS shortestPath
ORDER BY    myUser1,
            myUser2;